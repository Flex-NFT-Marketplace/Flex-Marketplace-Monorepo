[
  {
    "name": "MarketPlaceImpl",
    "type": "impl",
    "interface_name": "flex::marketplace::marketplace::IMarketPlace"
  },
  {
    "name": "core::bool",
    "type": "enum",
    "variants": [
      {
        "name": "False",
        "type": "()"
      },
      {
        "name": "True",
        "type": "()"
      }
    ]
  },
  {
    "name": "core::integer::u256",
    "type": "struct",
    "members": [
      {
        "name": "low",
        "type": "core::integer::u128"
      },
      {
        "name": "high",
        "type": "core::integer::u128"
      }
    ]
  },
  {
    "name": "flex::marketplace::utils::order_types::TakerOrder",
    "type": "struct",
    "members": [
      {
        "name": "is_order_ask",
        "type": "core::bool"
      },
      {
        "name": "taker",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "price",
        "type": "core::integer::u128"
      },
      {
        "name": "token_id",
        "type": "core::integer::u256"
      },
      {
        "name": "amount",
        "type": "core::integer::u128"
      },
      {
        "name": "min_percentage_to_ask",
        "type": "core::integer::u128"
      },
      {
        "name": "params",
        "type": "core::felt252"
      }
    ]
  },
  {
    "name": "flex::marketplace::utils::order_types::MakerOrder",
    "type": "struct",
    "members": [
      {
        "name": "is_order_ask",
        "type": "core::bool"
      },
      {
        "name": "signer",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "collection",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "price",
        "type": "core::integer::u128"
      },
      {
        "name": "seller",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "token_id",
        "type": "core::integer::u256"
      },
      {
        "name": "amount",
        "type": "core::integer::u128"
      },
      {
        "name": "strategy",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "currency",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "salt_nonce",
        "type": "core::integer::u128"
      },
      {
        "name": "start_time",
        "type": "core::integer::u64"
      },
      {
        "name": "end_time",
        "type": "core::integer::u64"
      },
      {
        "name": "min_percentage_to_ask",
        "type": "core::integer::u128"
      },
      {
        "name": "params",
        "type": "core::felt252"
      }
    ]
  },
  {
    "name": "flex::marketplace::marketplace::IMarketPlace",
    "type": "interface",
    "items": [
      {
        "name": "initializer",
        "type": "function",
        "inputs": [
          {
            "name": "domain_name",
            "type": "core::felt252"
          },
          {
            "name": "domain_ver",
            "type": "core::felt252"
          },
          {
            "name": "recipient",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "currency",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "execution",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "royalty_manager",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "checker",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "owner",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "cancel_all_orders_for_sender",
        "type": "function",
        "inputs": [
          {
            "name": "min_nonce",
            "type": "core::integer::u128"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "cancel_maker_order",
        "type": "function",
        "inputs": [
          {
            "name": "order_nonce",
            "type": "core::integer::u128"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "match_ask_with_taker_bid",
        "type": "function",
        "inputs": [
          {
            "name": "taker_bid",
            "type": "flex::marketplace::utils::order_types::TakerOrder"
          },
          {
            "name": "maker_ask",
            "type": "flex::marketplace::utils::order_types::MakerOrder"
          },
          {
            "name": "maker_ask_signature",
            "type": "core::array::Array::<core::felt252>"
          },
          {
            "name": "custom_non_fungible_token_recipient",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "match_bid_with_taker_ask",
        "type": "function",
        "inputs": [
          {
            "name": "taker_ask",
            "type": "flex::marketplace::utils::order_types::TakerOrder"
          },
          {
            "name": "maker_bid",
            "type": "flex::marketplace::utils::order_types::MakerOrder"
          },
          {
            "name": "maker_bid_signature",
            "type": "core::array::Array::<core::felt252>"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "execute_auction_sale",
        "type": "function",
        "inputs": [
          {
            "name": "maker_ask",
            "type": "flex::marketplace::utils::order_types::MakerOrder"
          },
          {
            "name": "maker_ask_signature",
            "type": "core::array::Array::<core::felt252>"
          },
          {
            "name": "maker_bid",
            "type": "flex::marketplace::utils::order_types::MakerOrder"
          },
          {
            "name": "maker_bid_signature",
            "type": "core::array::Array::<core::felt252>"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "update_hash_domain",
        "type": "function",
        "inputs": [
          {
            "name": "domain_name",
            "type": "core::felt252"
          },
          {
            "name": "domain_ver",
            "type": "core::felt252"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "update_protocol_fee_recipient",
        "type": "function",
        "inputs": [
          {
            "name": "recipient",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "update_currency_manager",
        "type": "function",
        "inputs": [
          {
            "name": "manager",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "update_execution_manager",
        "type": "function",
        "inputs": [
          {
            "name": "manager",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "update_royalty_fee_manager",
        "type": "function",
        "inputs": [
          {
            "name": "manager",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "update_transfer_selector_NFT",
        "type": "function",
        "inputs": [
          {
            "name": "selector",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "update_signature_checker",
        "type": "function",
        "inputs": [
          {
            "name": "checker",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "get_hash_domain",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::felt252"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_protocol_fee_recipient",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_currency_manager",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_execution_manager",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_royalty_fee_manager",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_transfer_selector_NFT",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_signature_checker",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_user_min_order_nonce",
        "type": "function",
        "inputs": [
          {
            "name": "user",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [
          {
            "type": "core::integer::u128"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_is_user_order_nonce_executed_or_cancelled",
        "type": "function",
        "inputs": [
          {
            "name": "user",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "nonce",
            "type": "core::integer::u128"
          }
        ],
        "outputs": [
          {
            "type": "core::bool"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "get_counter_usage_signature",
        "type": "function",
        "inputs": [
          {
            "name": "user",
            "type": "core::starknet::contract_address::ContractAddress"
          },
          {
            "name": "nonce",
            "type": "core::integer::u128"
          }
        ],
        "outputs": [
          {
            "type": "core::integer::u128"
          }
        ],
        "state_mutability": "view"
      }
    ]
  },
  {
    "name": "OwnableImpl",
    "type": "impl",
    "interface_name": "openzeppelin::access::ownable::interface::IOwnable"
  },
  {
    "name": "openzeppelin::access::ownable::interface::IOwnable",
    "type": "interface",
    "items": [
      {
        "name": "owner",
        "type": "function",
        "inputs": [],
        "outputs": [
          {
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "state_mutability": "view"
      },
      {
        "name": "transfer_ownership",
        "type": "function",
        "inputs": [
          {
            "name": "new_owner",
            "type": "core::starknet::contract_address::ContractAddress"
          }
        ],
        "outputs": [],
        "state_mutability": "external"
      },
      {
        "name": "renounce_ownership",
        "type": "function",
        "inputs": [],
        "outputs": [],
        "state_mutability": "external"
      }
    ]
  },
  {
    "name": "constructor",
    "type": "constructor",
    "inputs": [
      {
        "name": "domain_name",
        "type": "core::felt252"
      },
      {
        "name": "domain_ver",
        "type": "core::felt252"
      },
      {
        "name": "recipient",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "currency",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "execution",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "royalty_manager",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "checker",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "name": "owner",
        "type": "core::starknet::contract_address::ContractAddress"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::CancelAllOrders",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "user",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "new_min_nonce",
        "type": "core::integer::u128"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::CancelOrder",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "user",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "order_nonce",
        "type": "core::integer::u128"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::NewHashDomain",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "hash",
        "type": "core::felt252"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::NewProtocolFeeRecipient",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "recipient",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::NewCurrencyManager",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "manager",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::NewExecutionManager",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "manager",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::NewRoyaltyFeeManager",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "manager",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::NewTransferSelectorNFT",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "selector",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::NewSignatureChecker",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "checker",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::RoyaltyPayment",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "collection",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "token_id",
        "type": "core::integer::u256"
      },
      {
        "kind": "data",
        "name": "royalty_recipient",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "currency",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "amount",
        "type": "core::integer::u128"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::TakerAsk",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "order_hash",
        "type": "core::felt252"
      },
      {
        "kind": "data",
        "name": "order_nonce",
        "type": "core::integer::u128"
      },
      {
        "kind": "data",
        "name": "taker",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "maker",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "strategy",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "currency",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "collection",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "token_id",
        "type": "core::integer::u256"
      },
      {
        "kind": "data",
        "name": "amount",
        "type": "core::integer::u128"
      },
      {
        "kind": "data",
        "name": "price",
        "type": "core::integer::u128"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "flex::marketplace::marketplace::MarketPlace::TakerBid",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "order_hash",
        "type": "core::felt252"
      },
      {
        "kind": "data",
        "name": "order_nonce",
        "type": "core::integer::u128"
      },
      {
        "kind": "data",
        "name": "taker",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "maker",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "strategy",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "currency",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "collection",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "token_id",
        "type": "core::integer::u256"
      },
      {
        "kind": "data",
        "name": "amount",
        "type": "core::integer::u128"
      },
      {
        "kind": "data",
        "name": "price",
        "type": "core::integer::u128"
      },
      {
        "kind": "data",
        "name": "original_taker",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "timestamp",
        "type": "core::integer::u64"
      }
    ]
  },
  {
    "kind": "struct",
    "name": "openzeppelin::access::ownable::ownable::OwnableComponent::OwnershipTransferred",
    "type": "event",
    "members": [
      {
        "kind": "data",
        "name": "previous_owner",
        "type": "core::starknet::contract_address::ContractAddress"
      },
      {
        "kind": "data",
        "name": "new_owner",
        "type": "core::starknet::contract_address::ContractAddress"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "openzeppelin::access::ownable::ownable::OwnableComponent::Event",
    "type": "event",
    "variants": [
      {
        "kind": "nested",
        "name": "OwnershipTransferred",
        "type": "openzeppelin::access::ownable::ownable::OwnableComponent::OwnershipTransferred"
      }
    ]
  },
  {
    "kind": "enum",
    "name": "openzeppelin::security::reentrancyguard::ReentrancyGuardComponent::Event",
    "type": "event",
    "variants": []
  },
  {
    "kind": "enum",
    "name": "flex::marketplace::marketplace::MarketPlace::Event",
    "type": "event",
    "variants": [
      {
        "kind": "nested",
        "name": "CancelAllOrders",
        "type": "flex::marketplace::marketplace::MarketPlace::CancelAllOrders"
      },
      {
        "kind": "nested",
        "name": "CancelOrder",
        "type": "flex::marketplace::marketplace::MarketPlace::CancelOrder"
      },
      {
        "kind": "nested",
        "name": "NewHashDomain",
        "type": "flex::marketplace::marketplace::MarketPlace::NewHashDomain"
      },
      {
        "kind": "nested",
        "name": "NewProtocolFeeRecipient",
        "type": "flex::marketplace::marketplace::MarketPlace::NewProtocolFeeRecipient"
      },
      {
        "kind": "nested",
        "name": "NewCurrencyManager",
        "type": "flex::marketplace::marketplace::MarketPlace::NewCurrencyManager"
      },
      {
        "kind": "nested",
        "name": "NewExecutionManager",
        "type": "flex::marketplace::marketplace::MarketPlace::NewExecutionManager"
      },
      {
        "kind": "nested",
        "name": "NewRoyaltyFeeManager",
        "type": "flex::marketplace::marketplace::MarketPlace::NewRoyaltyFeeManager"
      },
      {
        "kind": "nested",
        "name": "NewTransferSelectorNFT",
        "type": "flex::marketplace::marketplace::MarketPlace::NewTransferSelectorNFT"
      },
      {
        "kind": "nested",
        "name": "NewSignatureChecker",
        "type": "flex::marketplace::marketplace::MarketPlace::NewSignatureChecker"
      },
      {
        "kind": "nested",
        "name": "RoyaltyPayment",
        "type": "flex::marketplace::marketplace::MarketPlace::RoyaltyPayment"
      },
      {
        "kind": "nested",
        "name": "TakerAsk",
        "type": "flex::marketplace::marketplace::MarketPlace::TakerAsk"
      },
      {
        "kind": "nested",
        "name": "TakerBid",
        "type": "flex::marketplace::marketplace::MarketPlace::TakerBid"
      },
      {
        "kind": "flat",
        "name": "OwnableEvent",
        "type": "openzeppelin::access::ownable::ownable::OwnableComponent::Event"
      },
      {
        "kind": "flat",
        "name": "ReentrancyGuardEvent",
        "type": "openzeppelin::security::reentrancyguard::ReentrancyGuardComponent::Event"
      }
    ]
  }
]